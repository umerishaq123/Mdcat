import 'package:divine_company_app/config/routes/page_transtion.dart';
import 'package:divine_company_app/core/constants/app_constants_color.dart';
import 'package:divine_company_app/core/constants/app_constants_text_style.dart';
import 'package:divine_company_app/core/constants/app_constants_widget_style.dart';
import 'package:divine_company_app/features/alerts/presentation/screens/all_alerts_screen.dart';
import 'package:flutter/material.dart';
import '../usecases/dissmiss_keyboard.dart';

class ReuseableScaffoldScreen extends StatelessWidget {
  final String appBarTitle;
  final Widget? circularAvatar;
  final Widget content;
  final Function? onLeadingPressed;
  // final Function? appOnActionPressed;
  // final bool scrollable;
  final bool notification_icon;
  final bool add_to_chat_icon;
  final Function? ongroupDetailsPress;

  final isThereCircularAvatar;
  final resizeToAvoidBottomInset;

  ReuseableScaffoldScreen({
    required this.appBarTitle,
    this.circularAvatar,
    required this.content,
    this.onLeadingPressed,
    this.isThereCircularAvatar = false,
    this.resizeToAvoidBottomInset = false,
    this.notification_icon = true,
    this.add_to_chat_icon = false,
    this.ongroupDetailsPress,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: resizeToAvoidBottomInset,
      appBar: AppBar(
        leading: IconButton(
          onPressed: () {
            if (onLeadingPressed != null) {
              onLeadingPressed!();
            } else if (Navigator.of(context).canPop()) {
              Navigator.of(context).pop();
            } else {
              // If there's no screen behind, you can close the app
              showCloseConfirmationDialog(context);
            }
          },
          icon: Icon(Icons.arrow_back_ios),
          color: AppConstantsColor.kcwhiteColor,
        ),
        // forceMaterialTransparency: true,
        backgroundColor: AppConstantsColor.kcprimaryColor,

        elevation: 0.0,
        title: add_to_chat_icon != false
            ? InkWell(
                onTap: () {
                  ongroupDetailsPress!();
                },
                child: Text(appBarTitle,
                    style: AppConstantsTextStyle.kTextStyleLargreBoldWhite),
              )
            : Text(appBarTitle,
                style: AppConstantsTextStyle.kTextStyleLargreBoldWhite),

        centerTitle: true,
        actions: <Widget>[
          if (add_to_chat_icon != false)
            IconButton(
              icon: Icon(Icons.add_circle_rounded),
              onPressed: () {
                if (ongroupDetailsPress != null) {
                  ongroupDetailsPress!();
                }
              },
              color: AppConstantsColor.kcwhiteColor,
            ),
          if (notification_icon != false)
            IconButton(
              icon: Icon(Icons.notifications_active),
              onPressed: () {
                Navigator.push(
                    context, SlideTransitionPage(page: AllAlertsScreen()));
              },
              color: AppConstantsColor.kcwhiteColor,
            ),
        ],
      ),
      body: GestureDetector(
        onTap: () {
          dismissKeyboard(context);
        },
        child: Stack(
          children: [
            Container(
              height: MediaQuery.of(context).size.height / 5.5,
              clipBehavior: Clip.antiAlias,
              decoration: ShapeDecoration(
                gradient: AppConstantsWidgetStyle.kgradientScreen,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(0),
                ),
              ),
              child: Align(
                alignment: Alignment.topCenter,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    if (circularAvatar != null) circularAvatar!,
                  ],
                ),
              ),
            ),
            Align(
              alignment: Alignment.bottomCenter,
              child: Container(
                width: double.maxFinite,
                height: isThereCircularAvatar
                    ? MediaQuery.of(context).size.height / 1.3
                    : MediaQuery.of(context).size.height,
                decoration: BoxDecoration(
                  color: AppConstantsColor.kcgreyColor,
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(46.0),
                    topRight: Radius.circular(46.0),
                  ),
                ),
                child: Padding(
                    padding: const EdgeInsets.only(
                        left: 16, right: 16, top: 16, bottom: 8),
                    child: content),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Future<bool?> showCloseConfirmationDialog(BuildContext context) async {
//   return showDialog<bool?>(
//     context: context,
//     builder: (BuildContext context) {
//       return AlertDialog(
//         title: Text('Exit'),
//         content: Text('Are you sure you want to exist.'),
//         actions: <Widget>[
//           TextButton(
//             onPressed: () {
//               Navigator.of(context).pop(false); // User does not want to exit
//             },
//             child: Text('Cancel'),
//           ),
//           TextButton(
//             onPressed: () {
//               exit(0);
//             },
//             child: Text('Exit'),
//           ),
//         ],
//       );
//     },
//   );
// }

Future<bool?> showCloseConfirmationDialog(BuildContext context) async {
  return showDialog<bool?>(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text('Exit'),
        content: Text('Are you sure you want to exit?'),
        actions: <Widget>[
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(false); // User does not want to exit
            },
            child: Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(true); // User confirms exit
            },
            child: Text('Exit'),
          ),
        ],
      );
    },
  );
}